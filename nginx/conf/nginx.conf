# 启动进程,通常设置成和 CPU 的数量相等
worker_processes  2;

events {
    # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式
    # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能
    use epoll;
    # 单个后台 worker process 进程的最大并发链接数
    worker_connections  1024;
}

http {
    # 设定 mime 类型,类型由 mime.type 文件定义
    include       mime.types;
    default_type  application/octet-stream;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    # 必须设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.
    sendfile        on;
    
    # 连接超时时间
    keepalive_timeout  65;
    # 设定请求缓冲
    client_header_buffer_size 2k;

    #这里示例是配置一个域名为 www.hualongepay.com  
	#配置成功后即可使用https协议访问
	#
	#
	#
    server {
	# 监听的ip和端口 ip默认localhost
        listen       80;
	#ssl参数
		listen              443 ssl;
		server_name         www.hualongepay.com;
		#证书文件
		ssl_certificate     ng.pem;         #阿里云上申请的ssl证书    ps:每个证书都可以绑定一个或多个域名 这里的证书绑定在www.hualongepay.com域名上
		#私钥文件
		ssl_certificate_key ng.key;         #阿里云上申请的ssl证书的私钥
		ssl_session_timeout 5m;
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_prefer_server_ciphers on;
		
	
		
		
	# 所有的请求都以 / 开始，所有的请求都可以匹配此 location
        location / {
	    # 使用 root 指令指定虚拟主机目录即网页存放目录
	    # 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html
	    # 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html

            root   /usr/share/nginx/wwwroot/dist;     #前端项目挂载到容器内的路径
	    # 指定欢迎页面，按从左到右顺序查找
            index  index.html index.htm;
        }

    }




  #一个普通的域名80端口代理   ps:www.hlongyc.com  要解析到此nginx所在这台服务器上
  server{

    listen 80;

    server_name www.hlongyc.com;

     location / {
	    # 使用 root 指令指定虚拟主机目录即网页存放目录
	    # 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html
	    # 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html

            root   /usr/share/nginx/officialweb/dist;
	    # 指定欢迎页面，按从左到右顺序查找
            index  index.html index.htm;
        }

  }

 #一个普通的域名80端口代理   ps:www.hualpay.com 要解析到此nginx所在这台服务器上
 server{

    listen 80;

    server_name www.hualpay.com;

     location / {
	    # 使用 root 指令指定虚拟主机目录即网页存放目录
	    # 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html
	    # 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html

            root   /usr/share/nginx/signupsys/dist;
	    # 指定欢迎页面，按从左到右顺序查找
            index  index.html index.htm;
        }

  }


 #给xs.hualpay.com域名配置一个https  
server {
        listen       80;
	#ssl参数
		listen              443 ssl;
		server_name         xs.hualpay.com;   
		#证书文件
		ssl_certificate     hl.xs.back.pem;           #阿里云上申请的ssl证书    ps:每个证书都可以绑定一个或多个域名 这里的证书绑定在xs.hualpay.com域名上  也可以共用其他证书
		#私钥文件
		ssl_certificate_key hl.xs.back.key;           
		ssl_session_timeout 5m;
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_prefer_server_ciphers on;
		
	
		
		
	# 所有的请求都以 / 开始，所有的请求都可以匹配此 location
        location / {
	    # 使用 root 指令指定虚拟主机目录即网页存放目录
	    # 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html
	    # 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html

            root   /usr/share/nginx/sxback/dist;
	    # 指定欢迎页面，按从左到右顺序查找
            index  index.html index.htm;
        }

    }

#一个普通的域名80端口代理   ps:xs.hualpay.com 要解析到此nginx所在这台服务器上
server{

    listen 80;

    server_name xs.hualpay.com;

     location / {
	    # 使用 root 指令指定虚拟主机目录即网页存放目录
	    # 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html
	    # 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html

            root   /usr/share/nginx/sxback/dist;
	    # 指定欢迎页面，按从左到右顺序查找
            index  index.html index.htm;
        }

  }

#使用hlongyc.com域名创建了一个二级域名用来访问我们自己的gitlab
server {
    listen       80;
    server_name  git.hlongyc.com;

    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


    location / {
        proxy_pass http://118.31.122.157:5100;          #gitlab服务
        proxy_connect_timeout 600; 
        proxy_read_timeout 600;
    }
}

#使用hlongyc.com域名创建了一个二级域名用来访问我们自己的docker仓库
server {
    listen       80;
    server_name  repo.hlongyc.com;

    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


    location / {
        proxy_pass http://118.31.122.157:5000;          #maven服务
        proxy_connect_timeout 600;
        proxy_read_timeout 600;
    }
}

#使用hlongyc.com域名创建了一个二级域名用来访问我们自己的maven私服 nexus
server {
    listen       80;
    server_name  mvn.hlongyc.com;

    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


    location / {
        proxy_pass http://47.111.139.146:8081;
        proxy_connect_timeout 600;
        proxy_read_timeout 600;
    }
}




   	
	  #配置负载均衡池
#Demo1负载均衡池
upstream gw_pool{
    server 47.98.59.16:10101;
}
upstream websocket{
    server 47.98.59.16:8205;
}

#gw_pool端口转发
#此配置将gw.hualongepay.com 的请求转发到 自定义热备gw_pool(47.98.59.16:10101)上 
server {
    listen       80;
    server_name  gw.hualongepay.com;
	#ssl参数
		listen              443 ssl;
		#证书文件
		ssl_certificate     gw.pem;
		#私钥文件
		ssl_certificate_key gw.key;
		ssl_session_timeout 5m;
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_prefer_server_ciphers on;
    
	
	#此处配置的为 websocket wss协议 微信小程序中要求websocket必须使用wss协议
	#访问gw.hualongepay.com/wss/*  可以连接到 websocket(47.98.59.16:8205) 服务
  location /wss/ {
        client_max_body_size 100M;
        proxy_set_header Host $host;
        proxy_read_timeout 3600s;
        proxy_set_header Upgrade $http_upgrade;    #支持wss
        proxy_set_header Connection "upgrade";    #支持wss
        proxy_pass http://websocket;                  
    }


    #将所有请求转发给gw_pool池的应用处理
    location / {
	
        proxy_set_header  X-Real-IP  $remote_addr;
	#add_header Access-Control-Allow-Origin *;	
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto https;
        proxy_pass http://gw_pool;
    }
}
	
}
